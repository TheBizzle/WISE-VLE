<?xml version="1.0" encoding="UTF-8"?>
<otrunk id="33754150-b594-11d9-9669-0800200c9a66">
  <imports>
    <import class="org.concord.otrunk.OTSystem" />
    <import class="org.concord.otrunk.view.OTViewEntry" />
    <import class="org.concord.otrunk.view.OTViewBundle" />
    <import class="org.concord.otrunk.OTInclude" />
    <import class="org.telscenter.pas.otrunk.skeleton.OTPasProject" />
    <import class="org.telscenter.pas.otrunk.skeleton.OTPasActivity" />
    <import class="org.telscenter.pas.otrunk.skeleton.OTPasStep" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTDisplayPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTEvidence" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTHelloWorld" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTOutsideLink" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTNote" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTStudentAssessment" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTSelfAssessment" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTChallengeQuestion" />
    <import class="org.telscenter.pas.otrunk.skeleton.OTGenericOTrunkStep" />
    <import class="org.concord.graph.util.state.OTDrawingTool" />
    <import class="org.concord.otrunk.view.OTViewMode" />
    <import class="org.concord.data.state.OTDataStore" />
    <import class="org.concord.otrunk.graph.OTDataCollectorViewConfig" />
    <import class="org.concord.data.state.OTDataChannelDescription" />
    <import class="org.concord.data.state.OTDataField" />
    <import class="org.concord.data.state.OTWaveGenerator" />
    <import class="org.concord.data.state.OTMultiWaveGenerator" />
    <import class="org.concord.data.state.OTWave" />
    <import class="org.concord.datagraph.state.OTDataGraph" />
    <import class="org.concord.datagraph.state.OTDataAxis" />
    <import class="org.concord.datagraph.state.OTDataGraphable" />
    <import class="org.concord.datagraph.state.OTDataCollector" />
    <import class="org.concord.datagraph.state.OTMultiDataGraph" />
    <import class="org.concord.datagraph.state.OTDataPointLabel" />
    <import class="org.concord.datagraph.state.OTDataPointRuler" />
    <import class="org.concord.graph.util.state.OTDrawingTool" />
    <import class="org.concord.graph.util.state.OTDrawingStamp" />
    <import class="org.concord.graph.util.state.OTDrawingImageIcon" />
    <import class="org.concord.graph.util.state.OTDrawingShape" />
    <import class="org.concord.graph.util.state.OTPointTextLabel" />
    <import class="org.concord.otrunk.util.OTSharingBundle" />
    <import class="org.concord.otrunk.view.document.OTCompoundDoc" />
    <import class="org.concord.otrunk.view.document.OTDocumentViewConfig" />
    <import class="org.concord.otrunk.view.OTObjectEditViewConfig" />
    <import class="org.concord.data.state.OTDataStore" />
    <import class="org.concord.data.state.OTDataChannelDescription" />
    <import class="org.concord.data.state.OTDataField" />
    <import class="org.concord.data.state.OTDataTable" />
    <import class="org.concord.datagraph.state.OTDataGraph" />
    <import class="org.concord.datagraph.state.OTDataAxis" />
    <import class="org.concord.datagraph.state.OTDataGraphable" />
    <import class="org.concord.datagraph.state.OTDataCollector" />
    <import class="org.concord.datagraph.state.OTMultiDataGraph" />
    <import class="org.concord.datagraph.state.OTPluginView" />
    <import class="org.concord.datagraph.state.OTDataBarGraphable" />
    <import class="org.concord.framework.otrunk.view.OTFrame" />
    <import class="org.concord.graph.util.state.OTDrawingTool" />
    <import class="org.concord.graph.util.state.OTDrawingStamp" />
    <import class="org.concord.graph.util.state.OTDrawingImageIcon" />
    <import class="org.concord.graph.util.state.OTDrawingShape" />
    <import class="org.concord.graph.util.state.OTDrawingTool2" />
    <import class="org.concord.graph.util.state.OTPointTextLabel" />
    <import class="org.concord.multimedia.state.OTSoundDataCollector" />
    <import class="org.concord.multimedia.state.OTSoundDataProducer" />
    <import class="org.concord.otrunk.OTInclude" />
    <import class="org.concord.otrunk.OTSystem" />
    <import class="org.concord.otrunk.browser.mozswing.OTMozSwing" />
    <import class="org.concord.otrunk.graph.OTDataCollectorViewConfig" />
    <import class="org.concord.otrunk.overlay.OTOverlay" />
    <import class="org.concord.otrunk.script.ui.OTScriptObject" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariable" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariableComponent" />
    <import class="org.concord.otrunk.script.ui.OTScriptVariableView" />
    <import class="org.concord.otrunk.script.js.OTJavascript" />
    <import class="org.concord.otrunk.script.OTScriptEngineBundle" />
    <import class="org.concord.otrunk.script.OTScriptEngineEntry" />
    <import class="org.concord.otrunk.ui.OTButton" />
    <import class="org.concord.otrunk.ui.OTCardContainer" />
    <import class="org.concord.otrunk.ui.OTChoice" />
    <import class="org.concord.otrunk.ui.OTChoiceMultiple" />
    <import class="org.concord.otrunk.ui.OTImage" />
    <import class="org.concord.otrunk.ui.OTModeSwitcher" />
    <import class="org.concord.otrunk.ui.OTSoundPlayer" />
    <import class="org.concord.otrunk.ui.OTText" />
    <import class="org.concord.otrunk.ui.swing.OTChoiceViewConfig" />
    <import class="org.concord.otrunk.view.OTFolderObject" />
    <import class="org.concord.otrunk.view.OTObjectEditViewConfig" />
    <import class="org.concord.otrunk.view.OTViewChild" />
    <import class="org.concord.otrunk.view.OTViewEntry" />
    <import class="org.concord.otrunk.view.OTViewBundle" />
    <import class="org.concord.otrunk.view.OTViewMode" />
    <import class="org.concord.otrunk.view.document.OTCompoundDoc" />
    <import class="org.concord.otrunk.view.document.OTCssText" />
    <import class="org.concord.otrunk.view.document.edit.OTDocumentEditViewConfig" />
    <import class="org.concord.otrunk.view.prototype.OTPrototypeViewEntry" />
    <import class="org.concord.otrunk.view.prototype.OTPrototypeEventController" />
    <import class="org.concord.otrunk.view.prototype.OTPrototypeMapEntry" />
    <import class="org.concord.otrunkmw.OTModelerPage" />
    <import class="org.concord.otrunknl4.OTNLogoModel" />
    <import class="org.concord.otrunkcck.OTCCKModel" />
    <import class="org.concord.otrunkphet.balloons.OTPhetBalloonsModel" />
    <import class="org.concord.sensor.state.OTDeviceConfig" />
    <import class="org.concord.sensor.state.OTExperimentRequest" />
    <import class="org.concord.sensor.state.OTInterfaceManager" />
    <import class="org.concord.sensor.state.OTSensorDataProxy" />
    <import class="org.concord.sensor.state.OTSensorRequest" />
    <import class="org.concord.sensor.state.OTZeroSensor" />
    <import class="org.concord.otrunk.view.OTViewService" />
    <import class="org.concord.otrunk.view.document.OTTextObject" />
    <import class="org.concord.otrunk.ui.OTChoiceWithFeedback" />
    <import class="org.telscenter.pas.otrunk.skeleton.OTPasHint" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTPedagogicaStep" />
    <import class="org.telscenter.pas.otrunk.skeleton.journal.OTJournalAlbum" />
    <import class="org.telscenter.pas.otrunk.skeleton.journal.OTJournalPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.journal.OTJournalSnapshotButton" />
    <import class="org.telscenter.pas.otrunk.skeleton.journal.OTJournalSnapshotButtonView" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshot" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshotAlbum" />
    <import class="org.concord.otrunk.ui.snapshot.OTSnapshotChooser" />
    <import class="org.telscenter.pas.otrunk.skeleton.journal.OTJournalStep" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTVideoPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTBrainstorm" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTIntroPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTReadingPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTQuiz" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTExamplePage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTSummaryPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTCartoonPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTSimulationPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTQuestionAnswer" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTTryitPage" />
    <import class="org.telscenter.pas.otrunk.skeleton.steps.OTHomeworkPage" />
  </imports>
  <objects>
    <OTSystem>
      <includes>
        <OTInclude href="http://tels-group.soe.berkeley.edu/aperritano/predefined-sensor-graphs.otml" />
      </includes>
      <bundles>
        <OTViewBundle>
          <viewEntries>
            <OTViewEntry objectClass="org.telscenter.pas.otrunk.skeleton.OTPasProject" viewClass="org.telscenter.pas.otrunk.skeleton.OTPasProjectView" />
            <OTViewEntry local_id="sound-grapher-view" viewClass="org.concord.multimedia.state.ui.OTSoundDataCollectorView" objectClass="org.concord.multimedia.state.OTSoundDataCollector" />
            <OTViewEntry local_id="mw-view" objectClass="org.concord.otrunkmw.OTModelerPage" viewClass="org.concord.otrunkmw.OTModelerPageView" />
            <OTViewEntry objectClass="org.concord.otrunk.OTIncludeRootObject" viewClass="org.concord.otrunk.OTIncludeRootObjectView" />
            <OTViewEntry local_id="moz-swing-view" objectClass="org.concord.otrunk.browser.mozswing.OTMozSwing" viewClass="org.concord.otrunk.browser.mozswing.OTMozSwingView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTModeSwitcher" viewClass="org.concord.otrunk.ui.swing.OTModeSwitcherView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTImage" viewClass="org.concord.otrunk.ui.swing.OTImageView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTModeSwitcher" viewClass="org.concord.otrunk.ui.swing.OTModeSwitcherView" />
            <OTViewEntry local_id="snapshot_button_view" objectClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalSnapshotButton" viewClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalSnapshotButtonView" />
            <OTViewEntry local_id="snapshot-chooser-view" objectClass="org.concord.otrunk.ui.snapshot.OTSnapshotChooser" viewClass="org.concord.otrunk.ui.snapshot.OTSnapshotChooserView" />
            <OTViewEntry local_id="journal_album_view" objectClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalAlbum" viewClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalAlbumView" />
            <OTDocumentViewConfig local_id="compound_doc_view" objectClass="org.concord.otrunk.view.document.OTCompoundDoc" viewClass="org.concord.otrunk.view.document.OTDocumentView">
              <cssBlocks>
                <OTCssText cssText="body { font-size: 18; FONT-STYLE: normal; FONT-FAMILY: Verdana, Arial; FONT-VARIANT: normal; TEXT-DECORATION: none }" />
              </cssBlocks>
            </OTDocumentViewConfig>
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTButton" viewClass="org.concord.otrunk.ui.swing.OTButtonView" />
            <OTViewEntry local_id="script-view" objectClass="org.concord.otrunk.script.ui.OTScriptObject" viewClass="org.concord.otrunk.script.ui.OTScriptObjectView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTButton" viewClass="org.concord.otrunk.ui.swing.OTButtonView" />
            <OTChoiceViewConfig local_id="choice-checkbox-view" objectClass="org.concord.otrunk.ui.OTChoiceMultiple" viewClass="org.concord.otrunk.ui.swing.OTChoiceCheckBoxView" useViewsAsChoices="true" />
            <OTChoiceViewConfig local_id="choice-radio-view" objectClass="org.concord.otrunk.ui.OTChoice" viewClass="org.concord.otrunk.ui.swing.OTChoiceRadioButtonView" useViewsAsChoices="true" />
            <OTViewEntry id="453a61b0-e18b-11dc-95ff-0800200c9a66" objectClass="org.concord.otrunk.ui.OTChoice" viewClass="org.concord.otrunk.ui.swing.OTChoiceComboBoxView" />
            <OTViewEntry objectClass="org.concord.otrunk.script.ui.OTScriptObject" viewClass="org.concord.otrunk.script.ui.OTScriptObjectView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTCardContainer" viewClass="org.concord.otrunk.ui.swing.OTCardContainerView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTBorderContainer" viewClass="org.concord.otrunk.ui.swing.OTBorderContainerView" />
            <OTViewEntry objectClass="org.concord.otrunk.ui.OTPlacementContainer" viewClass="org.concord.otrunk.ui.swing.OTPlacementContainerView" />
            <OTViewEntry id="be713960-e18a-11dc-95ff-0800200c9a66" objectClass="org.concord.otrunk.ui.OTText" viewClass="org.concord.otrunk.ui.swing.OTTextEditView" />
            <OTViewEntry id="c93a7460-e18a-11dc-95ff-0800200c9a66" objectClass="org.concord.otrunk.ui.OTText" viewClass="org.concord.otrunk.ui.swing.OTTextView" />
            <OTViewEntry local_id="data-collector-view" viewClass="org.concord.datagraph.state.OTDataCollectorView" objectClass="org.concord.datagraph.state.OTDataCollector" />
            <OTViewEntry viewClass="org.concord.datagraph.state.OTDataGraphView" objectClass="org.concord.datagraph.state.OTDataGraph" />
            <OTViewEntry viewClass="org.concord.data.state.OTDataFieldView" objectClass="org.concord.data.state.OTDataField" />
            <OTViewEntry local_id="drawing-view" viewClass="org.concord.datagraph.state.OTDataDrawingToolView" objectClass="org.concord.graph.util.state.OTDrawingTool" />
            <OTViewEntry viewClass="org.concord.datagraph.state.OTMultiDataGraphView" objectClass="org.concord.datagraph.state.OTMultiDataGraph" />
            <OTViewEntry local_id="cck-view" objectClass="org.concord.otrunkcck.OTCCKModel" viewClass="org.concord.otrunkcck.OTCCKModelView" />
            <OTViewEntry local_id="data-table-view" objectClass="org.concord.data.state.OTDataTable" viewClass="org.concord.data.state.OTDataTableView" />
            <OTViewEntry local_id="netlogo-view" viewClass="org.concord.otrunknl4.OTNLogoModelView" objectClass="org.concord.otrunknl4.OTNLogoModel" />
            <OTViewEntry objectClass="org.concord.otrunkphet.balloons.OTPhetBalloonsModel" viewClass="org.concord.otrunkphet.balloons.OTPhetBalloonsModelView" />
            <OTViewEntry local_id="sound-player-view" objectClass="org.concord.otrunk.ui.OTSoundPlayer" viewClass="org.concord.otrunk.ui.swing.OTSoundPlayerView" />
            <OTPrototypeViewEntry id="textsize-choice-view" objectClass="org.concord.otrunk.OTSystem" viewClass="org.concord.otrunk.view.prototype.OTPrototypeView" copyPrototype="false">
              <viewEntry>
                <object refid="453a61b0-e18b-11dc-95ff-0800200c9a66" />
              </viewEntry>
              <prototype>
                <OTChoice>
                  <choices>
                    <OTOverlay id="da41a2a0-c44e-11dc-95ff-0800200c9a66" name="Small text">
                      <deltaObjectMap>
                        <entry key="23cc14f0-c44f-11dc-95ff-0800200c9a66">
                          <OTCssText src="file:/Users/geoffreykwan/dev/workspaces/vleworkspace/WISE Project Converter/src/test/css/otrunk-small-font.css" />
                        </entry>
                      </deltaObjectMap>
                    </OTOverlay>
                    <OTOverlay id="6cc8e2b0-c44e-11dc-95ff-0800200c9a66" name="Normal text" />
                    <OTOverlay id="7ba31210-c44e-11dc-95ff-0800200c9a66" name="Large text">
                      <deltaObjectMap>
                        <entry key="23cc14f0-c44f-11dc-95ff-0800200c9a66">
                          <OTCssText src="file:/Users/geoffreykwan/dev/workspaces/vleworkspace/WISE Project Converter/src/test/css/otrunk-large-font.css" />
                        </entry>
                      </deltaObjectMap>
                    </OTOverlay>
                  </choices>
                </OTChoice>
              </prototype>
              <controller>
                <OTPrototypeEventController>
                  <mapping>
                    <OTPrototypeMapEntry modelProperty="overlays[0]" prototypeProperty="currentChoice" />
                  </mapping>
                </OTPrototypeEventController>
              </controller>
            </OTPrototypeViewEntry>
            <OTPrototypeViewEntry objectClass="org.concord.otrunk.OTSystem" viewClass="org.concord.otrunk.view.prototype.OTPrototypeView" copyPrototype="false">
              <viewEntry>
                <object refid="453a61b0-e18b-11dc-95ff-0800200c9a66" />
              </viewEntry>
              <prototype>
                <OTChoice>
                  <choices>
                    <OTOverlay name="English" />
                  </choices>
                </OTChoice>
              </prototype>
              <controller>
                <OTPrototypeEventController>
                  <mapping>
                    <OTPrototypeMapEntry modelProperty="overlays[1]" prototypeProperty="currentChoice" />
                  </mapping>
                </OTPrototypeEventController>
              </controller>
            </OTPrototypeViewEntry>
            <OTViewEntry objectClass="org.concord.graph.util.state.OTDrawingTool2" viewClass="org.concord.datagraph.state.OTDataDrawingToolView" />
          </viewEntries>
          <modes>
            <OTViewMode name="authoring">
              <map>
                <entry key="be713960-e18a-11dc-95ff-0800200c9a66">
                  <OTViewEntry objectClass="org.concord.otrunk.ui.OTText" viewClass="org.concord.otrunk.ui.swing.OTTextEditEditView" />
                </entry>
                <entry key="${journal_album_view}">
                  <OTViewEntry objectClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalAlbum" viewClass="org.telscenter.pas.otrunk.skeleton.journal.OTJournalAlbumEditView" />
                </entry>
                <entry key="${sound-grapher-view}">
                  <OTViewEntry viewClass="org.concord.multimedia.state.ui.OTSoundDataCollectorEditView" objectClass="org.concord.multimedia.state.OTSoundDataCollector" />
                </entry>
                <entry key="${moz-swing-view}">
                  <OTViewEntry objectClass="org.concord.otrunk.browser.mozswing.OTMozSwing" viewClass="org.concord.otrunk.browser.mozswing.OTMozSwingEditView" />
                </entry>
                <entry key="${choice-radio-view}">
                  <OTChoiceViewConfig objectClass="org.concord.otrunk.ui.OTChoice" viewClass="org.concord.otrunk.ui.swing.OTChoiceComboBoxEditView" useViewsAsChoices="true" />
                </entry>
                <entry key="${choice-checkbox-view}">
                  <OTChoiceViewConfig objectClass="org.concord.otrunk.ui.OTChoiceMultiple" viewClass="org.concord.otrunk.ui.swing.OTChoiceComboBoxEditView" useViewsAsChoices="true" />
                </entry>
                <entry key="${data-table-view}">
                  <OTViewEntry objectClass="org.concord.data.state.OTDataTable" viewClass="org.concord.otrunk.ui.swing.OTDataTableEditView" />
                </entry>
                <entry key="${netlogo-view}">
                  <OTViewEntry viewClass="org.concord.otrunknl4.OTNLogoModelEditView" objectClass="org.concord.otrunknl4.OTNLogoModel" />
                </entry>
                <entry key="${compound_doc_view}">
                  <OTDocumentEditViewConfig objectClass="org.concord.otrunk.view.document.OTCompoundDoc" viewClass="org.concord.otrunk.view.document.edit.OTDocumentEditView">
                    <documentViewConfig>
                      <object refid="${compound_doc_view}" />
                    </documentViewConfig>
                    <objectsToInsert>
                      <OTText name="Text field" />
                      <OTDrawingTool2 name="Draw tool" />
                      <OTChoice name="Multiple-choice (single answer)" />
                      <OTChoiceMultiple name="Multiple-choice (check boxes)" />
                      <OTDataTable name="Data table" showLastRowForAddingNew="true">
                        <dataStore>
                          <OTDataStore numberChannels="2" />
                        </dataStore>
                      </OTDataTable>
                      <OTDataCollector name="Data graph" title="Data graph">
                        <source>
                          <OTDataGraphable name="Data Graph" connectPoints="true" controllable="true" yColumn="1" drawMarks="false" color="16711680" xColumn="0" lineWidth="2.0">
                            <dataStore>
                              <OTDataStore />
                            </dataStore>
                          </OTDataGraphable>
                        </source>
                        <xDataAxis>
                          <OTDataAxis max="60.0" units="s" min="0.0" label="Time" />
                        </xDataAxis>
                        <yDataAxis>
                          <OTDataAxis max="40.0" units="" min="0.0" label="" />
                        </yDataAxis>
                      </OTDataCollector>
                      <OTSoundPlayer name="Sound player" />
                      <OTSoundDataCollector name="Sound grapher" title="Data graph">
                        <source>
                          <OTDataGraphable drawMarks="false" color="255" connectPoints="true" xColumn="0" yColumn="1" name="vf" lineWidth="2.0">
                            <dataProducer>
                              <OTSoundDataProducer isFFT="false" />
                            </dataProducer>
                            <dataStore>
                              <OTDataStore />
                            </dataStore>
                          </OTDataGraphable>
                        </source>
                        <xDataAxis>
                          <OTDataAxis max="0.06" units="ms" min="0.0" label="Time" />
                        </xDataAxis>
                        <yDataAxis>
                          <OTDataAxis max="150.0" units="" min="-150.0" label="" />
                        </yDataAxis>
                      </OTSoundDataCollector>
                    </objectsToInsert>
                  </OTDocumentEditViewConfig>
                </entry>
                <entry key="${cck-view}">
                  <OTViewEntry objectClass="org.concord.otrunkcck.OTCCKModel" viewClass="org.concord.otrunkcck.OTCCKModelEditView" />
                </entry>
                <entry key="${data-collector-view}">
                  <OTDataCollectorViewConfig viewClass="org.concord.otrunk.graph.OTDataCollectorEditView" objectClass="org.concord.datagraph.state.OTDataCollector">
                    <predefinedGraphs>
                      <object refid="088786c2-8719-11dc-8314-0800200c9a66" />
                    </predefinedGraphs>
                  </OTDataCollectorViewConfig>
                </entry>
                <entry key="${drawing-view}">
                  <OTViewEntry viewClass="org.concord.otrunk.graph.OTDataDrawingToolEditView" objectClass="org.concord.graph.util.state.OTDrawingTool" />
                </entry>
                <entry key="${sound-player-view}">
                  <OTViewEntry objectClass="org.concord.otrunk.ui.OTSoundPlayer" viewClass="org.concord.otrunk.ui.swing.OTSoundPlayerEditView" />
                </entry>
                <entry key="${mw-view}">
                  <OTViewEntry objectClass="org.concord.otrunkmw.OTModelerPage" viewClass="org.concord.otrunkmw.OTModelerPageEditView" />
                </entry>
              </map>
            </OTViewMode>
          </modes>
        </OTViewBundle>
        <OTSharingBundle />
      </bundles>
      <root>
        <OTPasProject id="971534ac-3f22-11dd-b240-cde0bfdd2411" title="Using Conditionals: Part 3 -- Virtual Pet" isAuthoringMode="false">
          <journalAlbum>
            <OTJournalAlbum id="4db44b59-5cff-11dd-a4b6-9b08a7b15b3c">
              <entries>
                <OTJournalPage title="Journal Page 1" studentPage="false" creationTime="Aug 22 at 1:07" notes="Add a note describing this journalPage...">
                  <parts>
                    <OTCompoundDoc>
                      <documentRefs>
                        <OTText id="9305318c-7303-11dd-b0b7-63524403b921" name="Text field" rows="2" />
                      </documentRefs>
                      <bodyText>
                        Hi I am a Journal 1.
                        <br />
                        <br />
                        <object refid="9305318c-7303-11dd-b0b7-63524403b921" />
                        <br />
                      </bodyText>
                    </OTCompoundDoc>
                    <OTCompoundDoc>
                      <documentRefs>
                        <OTText id="9305318d-7303-11dd-b0b7-63524403b921" name="Text field" rows="2" />
                      </documentRefs>
                      <bodyText>
                        Hi I am an answer to a part 2.
                        <br />
                        <br />
                        <object refid="9305318d-7303-11dd-b0b7-63524403b921" />
                        <br />
                      </bodyText>
                    </OTCompoundDoc>
                  </parts>
                </OTJournalPage>
              </entries>
            </OTJournalAlbum>
          </journalAlbum>
          <activityList>
            <OTPasActivity id="108577c9-ffa2-11dd-b2c3-7bd89c45bea2" title="Introduction" authorNotes="">
              <stepList>
                <OTIntroPage id="78545128-0234-11de-9062-13382964bfbf" title="Objectives" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;!--    &lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets" /&gt;    --&gt;

&lt;!--   &lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/style.css" /&gt;    --&gt;
&lt;!--    &lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/layout.css" /&gt;    --&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;

&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="header"&gt;Objectives&lt;/div&gt;

&lt;div id="content"&gt;
  
  &lt;div class="bubbleBox"&gt;
    &lt;div class="bubbleDivLeft"&gt;
      &lt;div class="blue speech talkLeft"&gt; &lt;img src="./art/constructor_bots/short_right.png" /&gt;
        &lt;div id="objectivesText"&gt;
          &lt;p&gt;Welcome back! Thanks again for helping me stamp out those bugs in the last section.  You're the best.&lt;/p&gt;
          &lt;p&gt;So, Cam, what's on the plate for today?&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;div class="bubbleBox"&gt;
    &lt;div class="bubbleDivRight"&gt;
      &lt;div class="green speech talkRight"&gt; &lt;img src="./art/constructor_bots/tall_right.png" /&gt;
        &lt;div id="objectivesText"&gt;
          &lt;p&gt;Here's our objectives for this section, Bolt.&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Review the previous section (Instant Quiz, 4 questions)&lt;/li&gt;
            &lt;li&gt;Modify a "Virtual Pet" module using BlueJ.&lt;/li&gt;
            &lt;li&gt;Learn about Varied-State Conditionals.&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;Let's get started!&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
                </OTIntroPage>
                <OTQuiz id="f686315b-0212-11de-9062-13382964bfbf" title="Instant Quiz 1/4" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <responseDeclaration identifier="CHOICE_ASSMT_0">
                        <correctResponse>
                          <value isDefault="false" isCorrect="false">SIMPLE_CHOICE_ID1</value>
                        </correctResponse>
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="false" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Sample MC Question Here


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1">Choice A</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 2">Choice A</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 3">Choice A</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 4">Choice A</simpleChoice>
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Click the adjacent EDIT button, then type your introduction here (overwrite these instructions).Your question will automatically be formatted with HTML.


&lt;/body&gt;&lt;/html&gt;</introductionHtml>
                </OTQuiz>
                <OTQuiz id="23142340-0213-11de-9062-13382964bfbf" title="Instant Quiz 2/4" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="false" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <responseDeclaration identifier="TEXT_ASSMT_0" />
                      <itemBody>
                        <extendedTextInteraction hasInlineFeedback="false" placeholderText="" responseIdentifier="TEXT_ASSMT_0" expectedLines="3">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Open Response Question Goes Here


&lt;/body&gt;&lt;/html&gt;</prompt>
                        </extendedTextInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</introductionHtml>
                </OTQuiz>
                <OTQuiz id="5ad65c49-0215-11de-9062-13382964bfbf" title="Instant Quiz 3/4" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="false" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Match &amp; Sequence question goes here


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1" />
                          <simpleChoice fixed="true" identifier="choice 2" />
                          <simpleChoice fixed="true" identifier="choice 3" />
                          <simpleChoice fixed="true" identifier="choice 4" />
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</introductionHtml>
                </OTQuiz>
                <OTQuiz id="477e7eb4-0213-11de-9062-13382964bfbf" title="Instant Quiz 4/4" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="false" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


FILL THE BLANK style question goes here


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1" />
                          <simpleChoice fixed="true" identifier="choice 2" />
                          <simpleChoice fixed="true" identifier="choice 3" />
                          <simpleChoice fixed="true" identifier="choice 4" />
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Click the adjacent EDIT button, then type your introduction here (overwrite these instructions).Your question will automatically be formatted with HTML.


&lt;/body&gt;&lt;/html&gt;</introductionHtml>
                </OTQuiz>
              </stepList>
            </OTPasActivity>
            <OTPasActivity id="af231e8c-0210-11de-9062-13382964bfbf" title="Explore New Ideas" authorNotes="">
              <stepList>
                <OTReadingPage id="e6a4256a-01e1-11de-9062-13382964bfbf" title="Introduction to Virtual Pets" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Introduction to Virtual Pet&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p&gt; Now it's time to put your knowledge of conditionals into practice.  For the next few days, you'll
work on the &lt;span class="vocab"&gt;Virtual Pet&lt;/span&gt; mini-project.
&lt;/p&gt;

&lt;img class="left" src="./art/constructor_bots/hover_right.png" /&gt;

&lt;p&gt;Constructor children need to have toys to play with, of course.  One toy, 
popular for Constructors as well as humans, is a little handheld device in which a pet "lives".
The pet has &lt;em&gt;moods&lt;/em&gt;, such as happiness or pain, and shows its current mood(s) through an image and a message on the toy.  The owner of the toy can make the pet &lt;em&gt;behave&lt;/em&gt; in certain ways.  And, often, when the pet does something, its mood changes.
&lt;/p&gt;

&lt;p&gt;Cam is, like you, learning to program in Java. She, like you will be shortly, is writing a Java program that will act like a fully working Virtual Pet toy &amp;mdash one inside a computer.  The toy will be better than any she can buy, though, because she gets to decide what she can do to the pet, and what happens afterwards.
&lt;/p&gt;


&lt;/body&gt;
&lt;/html&gt;</content>
                </OTReadingPage>
                <OTExamplePage id="ee4a9d1b-0452-11de-9e80-e9f7a2343f8e" title="Open Cam's BlueJ Project" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;

&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Launch Cam's BlueJ Project&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p&gt;Let's use BlueJ to open Cam's first attempt at writing a Virtual Pet toy, and take a look at 
what she did.  
&lt;/p&gt;

&lt;div class="openbluejproj"&gt;Open the "cam-v1" project. 
&lt;/div&gt;


&lt;p&gt;As you can see, there is a single class, named &lt;tt&gt;VirtualPet&lt;/tt&gt;. 
Each object of this class representa a virtual pet toy.
&lt;/p&gt;

&lt;div class="doit"&gt;Make a &lt;tt&gt;VirtualPet&lt;/tt&gt; object now, using the &lt;vocab&gt;object bench&lt;/vocab&gt; in the usual way.  You can name it anything you like.
&lt;/div&gt;

&lt;p&gt;A window will open, containing an image that represents the mood of the Virtual Pet you just made.  Cam has programmed the Virtual Pet to show a "normal" mood at the start.
&lt;/p&gt;

&lt;p&gt;The virtual pet has behaviors that you can invoke in the usual way.  You'll see the methods "feed", "exercise", and "sleep". 
&lt;/p&gt;

&lt;div class="doit"&gt;Invoke those methods now on your &lt;tt&gt;VirtualPet&lt;/tt&gt; object, and see what happens!
&lt;/div&gt;


&lt;/body&gt;
&lt;/html&gt;</content>
                </OTExamplePage>
                <OTExamplePage id="3a36821b-0230-11de-9062-13382964bfbf" title="Explore the Code" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Explore the Code&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p&gt;Now, lets look at the Java code that Constant wrote.  Open up the &lt;code&gt;VirtualPet&lt;/code&gt; class.  Take note of a few things:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The comment at the top shows the version and the author.  We are going to be looking at other versions of Constant's code, adding functionality and debugging for her.  Edit that comment to help you keep track of which version you are working on.
&lt;/li&gt;
&lt;li&gt;The first instance variables uses the special class &lt;code&gt;VirtualPetFace&lt;/code&gt; that we wrote for Constant and you.  It takes care of the images, the messages, and so forth; its details aren't important.  How it's controlled to show the image and messages that you want &lt;em&gt;is&lt;/em&gt; important.  More on that below.
&lt;/li&gt;
&lt;li&gt;You can see the constructor and the three methods that you explored: &lt;code&gt;feed&lt;/code&gt;, &lt;code&gt;exercise&lt;/code&gt;, and &lt;code&gt;sleep&lt;/code&gt;.  Look at how the methods set the message and the image for the virtual pet: they use the &lt;code&gt;VirtualPetFace&lt;/code&gt; object (stored in the &lt;code&gt;face&lt;/code&gt; instance variable) to call the methods &lt;code&gt;setMessage&lt;/code&gt; and &lt;code&gt;setImage&lt;/code&gt;.  Each of those takes a string as argument.
&lt;/li&gt;
&lt;li&gt; We'll look at the second instance variable, &lt;code&gt;hunger&lt;/code&gt;, in a bit.  
&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</content>
                </OTExamplePage>
              </stepList>
            </OTPasActivity>
            <OTPasActivity id="ea2774f5-0210-11de-9062-13382964bfbf" title="Programming" authorNotes="">
              <stepList>
                <OTExamplePage id="569d69f5-ee64-11dd-b081-1b1eed2735e4" title="Experiment" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/style.css" /&gt;
&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/layout.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Experiment with the Code&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p class="doit"&gt;
You may have noticed that Constant's pet doesn't say anything when it sleeps.  Add a Java statement so the pet gives an appropriate message (e.g., "zzzzzzz") when it is told to sleep.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</content>
                </OTExamplePage>
                <OTQuiz id="6e7b7851-029d-11de-aa46-594d426d2420" title="Check Your Understanding" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="false" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <responseDeclaration identifier="CHOICE_ASSMT_0">
                        <correctResponse>
                          <value isDefault="false" isCorrect="false">SIMPLE_CHOICE_ID1</value>
                        </correctResponse>
                      </responseDeclaration>
                      <responseDeclaration identifier="CHOICE_ASSMT_1">
                        <correctResponse>
                          <value isDefault="false" isCorrect="false">SIMPLE_CHOICE_ID1</value>
                        </correctResponse>
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="false" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


&lt;p&gt;What would the value of Constant's pet's &lt;code&gt;hunger&lt;/code&gt; variable be if, immediately after the pet was created, she invoked the following behaviors in order:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep&lt;/li&gt;
&lt;li&gt;Feed&lt;/li&gt;
&lt;li&gt;Feed&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;li&gt;Sleep&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;/ol&gt;


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1">0</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 2">3</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 3">7</simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 4">8</simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID5">We can't know</simpleChoice>
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;There is a second instance variable in Constant's code:
&lt;code&gt;hunger&lt;/code&gt;. Constant used this variable to keep track of
how hungry the pet was at any particular time. Some behaviors make
the varaible bigger&amp;mdash;that is, represent a hungrier
pet&amp;amp;mdash.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</introductionHtml>
                </OTQuiz>
                <OTSimulationPage id="fd69e4c2-029d-11de-aa46-594d426d2420" title="Program It" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/style.css" /&gt;
&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/layout.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Program It&lt;/div&gt;

&lt;div class="content"&gt;

&lt;p&gt;Lets help Constant make her virtual pet a little more interesting.  Obviously, it isn't realistic that 
a pet could get hungrier and hungrier forever.  At some point the pet should, well, perish.
&lt;/p&gt;

&lt;p class="doit"&gt;Add code such that, if the pet's &lt;code&gt;hunger&lt;/code&gt; variable goes over &lt;code&gt;12&lt;/code&gt;, it dies.
&lt;/p&gt;

&lt;p&gt;Do this in the "constant-v1" project.  (Remember, you can always grab the code in the original project again from the &lt;a href="page"&gt;course resources&lt;/a&gt;). [[ NOTE: the base for the POC should be http://uccpdev.berkeley.edu/uccp-assets/ .  The course resources area needs some work, ha ]].  Some tips you might keep in mind:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being "dead" is just another mood for the Virtual Pet.  You can't just type in any mood name, however; we've only provided initial images for some moods.  The moods "dead", "skeleton", and "pushingdaisies" will work fine, however.  

&lt;li&gt;Where do you need to put Java code check whether &lt;code&gt;hunger&lt;/code&gt; has gone above &lt;code&gt;12&lt;/code&gt;?  A good first thought is wherever the mood image gets set.  Another thought is only in places where the &lt;code&gt;hunger&lt;/code&gt; variable gets changed.  

&lt;li&gt;After you've written your conditionals, you might notice that a "dead" virtual pet can still have behaviors invoked.  For instance, feeding a pet that died from hunger will bring it back to life! Don't worry about that for now; you would need more conditionals to prevent resuscitation.
&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</content>
                </OTSimulationPage>
              </stepList>
            </OTPasActivity>
            <OTPasActivity id="c0e6d94f-0210-11de-9062-13382964bfbf" title="Connect Ideas" authorNotes="">
              <stepList>
                <OTExamplePage id="533cb803-029e-11de-aa46-594d426d2420" title="Brainstorm Discussion" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Brainstorm Discussion&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;div id="brainstorm"&gt;

&lt;p&gt;Compare the following two solutions for the problem above&amp;mdash;changing the mood to "dead" if the hunger is over 12&amp;mdash;&lt;code&gt;sleep&lt;/code&gt; method:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Version A&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;
public void sleep() {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;hunger = hunger + 1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setMessage("zzzzzzzzzz");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setImage("asleep");&lt;br&gt;    
&amp;nbsp;&amp;nbsp;&amp;nbsp;if (hunger &gt; 12) {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setMessage("awww, I got too hungry!");&lt;Br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setImage("dead");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}
&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Version B&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;
public void sleep() {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;hunger = hunger + 1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;if (hunger &gt; 12) {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setMessage("awww, I got too hungry!");&lt;Br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setImage("dead");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setMessage("zzzzzzzzzz");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;face.setImage("asleep");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}
&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;!--note, by including the setMessage call, these will definitely be different.  We could leave the 
setMessage call out, to just have the 'flickering' image issue?  I kinda like it this way, though -- maybe
you should have two messages, maybe not.  --&gt;
&lt;p&gt;Will these two versions behave identically, from the standpoint of someone playing with the toy?  If not, how will the difference show up, and which version do you think is better?  Why?&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;&gt;</content>
                </OTExamplePage>
                <OTSimulationPage id="89f9a0b4-029e-11de-aa46-594d426d2420" title="Debug" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/style.css" /&gt;
&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/layout.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Debug the Code&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p&gt;To make things more entertaining, Constant tried to add "tiredness" to her Virtual Pet.  Her idea was to add a new instance variable, naming it &lt;code&gt;tired&lt;/code&gt;, and changing the behaviors so that the value of 
&lt;code&gt;tired&lt;/code&gt; is changed.  But, things aren't working quite right.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</content>
                </OTSimulationPage>
                <OTExamplePage id="8549cd72-044e-11de-9e80-e9f7a2343f8e" title="Thinking Ahead..." authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://uccpdev.berkeley.edu/uccp-assets/" /&gt;

&lt;link rel="stylesheet" href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css" /&gt;


&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Brainstorm Discussion&lt;/div&gt;

&lt;div class="content"&gt;
 
	&lt;div id="brainstorm"&gt;
		&lt;img class="right" src="./art/constructor_bots/short_right.png" width="200px" /&gt;
		&lt;p&gt;Suggest one or two additional features to add to &lt;tt&gt;VirtualPet&lt;/tt&gt;.  Consider methods, instance variables, and interactions between them.&lt;/p&gt;
	&lt;/div&gt;

&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</content>
                </OTExamplePage>
              </stepList>
            </OTPasActivity>
            <OTPasActivity id="cf0de551-0210-11de-9062-13382964bfbf" title="Summary" authorNotes="">
              <stepList>
                <OTExamplePage id="4c4a31a1-0230-11de-9062-13382964bfbf" title="Section Wrap-Up" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link rel="stylesheet" href="uccpdev.berkeley.edu/var/www/uccp-assets/css/UCCP.css" /&gt;

&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Section Wrap-Up&lt;/div&gt;

&lt;div class="content"&gt;
 
&lt;p&gt;Today, you got a first look at the &lt;code&gt;Virtual Pet&lt;/code&gt; program, examining code from the constructor Constant.  
&lt;/p&gt;

&lt;p&gt;You added code to test how hungry a pet was, and looked at different possible solutions.
&lt;/p&gt;

&lt;p&gt;You also debugged Constant's code to add "tiredness" to her solution, making her pet more interesting.
&lt;/p&gt;

&lt;p&gt;In just this short time, the code we ended up with got somewhat complicated.  Next time, we'll start looking into how to use &lt;vocab&gt;helper methods&lt;/vocab&gt; to make the &lt;code&gt;VirtualPet&lt;/code&gt; class much more manageable.  After that, we look into how careful testing can help you be sure that changes you make do introduce bugs.  Eventually, you'll spend a few days with free reign to make your own virtual pet toy, the crazier the better!  Its for kids to play with, afterall.  


&lt;/body&gt;
&lt;/html&gt;</content>
                </OTExamplePage>
                <OTQuiz id="de335d65-029e-11de-aa46-594d426d2420" title="Untitled Step" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="false" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Instant Quiz Question 1 for Summary goes here


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1" />
                          <simpleChoice fixed="true" identifier="choice 2" />
                          <simpleChoice fixed="true" identifier="choice 3" />
                          <simpleChoice fixed="true" identifier="choice 4" />
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;html&gt;&lt;body style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;


Click the adjacent EDIT button, then type your introduction here (overwrite these instructions).Your question will automatically be formatted with HTML.


&lt;/body&gt;&lt;/html&gt;</introductionHtml>
                </OTQuiz>
              </stepList>
            </OTPasActivity>
            <OTPasActivity id="cfe5e62b-a777-11dd-ba59-7385082dba88" title="old sample steps" authorNotes="">
              <stepList>
                <OTIntroPage id="7a712330-028e-11de-aa46-594d426d2420" title="Talk Bubble Template" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;

&lt;base href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/style.css" /&gt;
&lt;link rel="stylesheet" href="http://tels-berkeley.soe.berkeley.edu/uccp/Assets/css/layout.css" /&gt;

&lt;title&gt;Proof of Concept 2&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;div class="header"&gt;Objectives&lt;/div&gt;

&lt;/div&gt;
&lt;div class="content"&gt;
  &lt;p&gt;A &lt;em&gt;variable&lt;/em&gt; is a symbol that represents a value. A variable's &lt;em&gt;type&lt;/em&gt; determines the type of information that it stores. Here are some basic Java variable types and what they represent:&lt;/p&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;

      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Example values&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int&lt;/td&gt;
      &lt;td&gt;an integer&lt;/td&gt;
      &lt;td&gt;0, 42, -3&lt;/td&gt;

    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Double&lt;/td&gt;
      &lt;td&gt;a decimal number&lt;/td&gt;
      &lt;td&gt;-1.0, 3.14159, 52&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;

      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;a piece of text&lt;/td&gt;
      &lt;td&gt;"hello", "As I pondered weak and weary"&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;boolean&lt;/td&gt;
      &lt;td&gt;true or false&lt;/td&gt;

      &lt;td&gt;true, false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;p&gt;To create a variable, it must be given a name. This is called &lt;em&gt;declaring&lt;/em&gt; a variable and it lets the computer know what type of variable it is.&lt;/p&gt;
  &lt;code&gt;int num;w
String greeting;&lt;/code&gt;
  &lt;p&gt;The first variable's name is &lt;code&gt;i&lt;/code&gt; and is an integer. The second variable's name is &lt;code&gt;greeting&lt;/code&gt; and is a String&lt;/p&gt;

  &lt;p&gt;Multiple variables of the same type can be declared in the same statement with each variable name separated by a comma. &lt;/p&gt;
  &lt;code&gt;int one, two, three;&lt;/code&gt;
  &lt;div class="blue speech right"&gt;&lt;img src="content_images/short_left.png" /&gt;
    &lt;div&gt;Help! I need somebody.&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="red speech left"&gt;&lt;img src="content_images/hover_left.png" /&gt;
    &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer metus. Donec auctor tristique pede. Nulla varius pellentesque purus. Sed sed nisl. Aenean libero. Nunc vel elit. Praesent elit. Donec tristique velit et sem. Nulla imperdiet. Phasellus dictum blandit dolor. Suspendisse lacus nulla, semper id, pellentesque molestie, hendrerit a, sapien. Nulla ornare, tellus ac vulputate viverra, magna nulla ornare orci, ultrices dapibus orci risus non magna.&lt;br /&gt;

      &lt;br /&gt;
      Curabitur turpis enim, posuere in, adipiscing eu, congue a, enim. Aliquam pellentesque nulla et lorem. Nullam arcu tortor, malesuada interdum, porta sed, porttitor vulputate, libero. Nunc eu eros. Maecenas egestas, ante eget mollis ullamcorper, leo turpis suscipit risus, ac tristique turpis eros in diam. Nam sit amet tellus iaculis justo adipiscing condimentum. Vestibulum tortor pede, pretium ut, tristique id, aliquam ac, leo. Integer vitae ligula. Maecenas sem nunc, viverra eu, lacinia sit amet, ullamcorper eget, est. Ut felis. Maecenas pretium. Aliquam volutpat. In sed turpis. Vestibulum feugiat. &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="green speech right"&gt;&lt;img src="content_images/tall_left.png" /&gt;
    &lt;div&gt;You know...that isn't actually helpful.&lt;/div&gt;
  &lt;/div&gt;
  &lt;p&gt; Once a variable has been declared, it can have its value changed with an &lt;em&gt;assignment&lt;/em&gt;. The expression on the right side of the equals sign is evaluated and then the variable name on the left is set to that value. If a variable is set to a value of the wrong type, it'll cause an error.&lt;/p&gt;

  &lt;code&gt;int a, b;
  a = 3;
  b = a+1; &lt;/code&gt;
  &lt;p&gt;Variables can also be declared with a starting value. This is called &lt;em&gt;initialization&lt;/em&gt;.&lt;/p&gt;
  &lt;code&gt;String str2 = "The Spanish Inquisition";
  int num1 = 3, num2 = 3+3;
  boolean answer = false;&lt;/code&gt; &lt;/div&gt;

&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
                </OTIntroPage>
                <OTIntroPage id="2ca1ed57-ee65-11dd-b081-1b1eed2735e4" title="Classes and instances" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html&gt;&lt;head&gt;

&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Intro";
var unit = "1";
var tools = " ";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;


&lt;p&gt;

In programming, we distinguish between the &lt;em&gt;concept&lt;/em&gt; of an object&amp;mdash;
represented by a description of the object's behaviors and state&amp;mdash;and the object itself.
We hinted at that distinction previously. For example, the description of an alarm clock's behaviors and state
isn't the same as an actual clock. There can be many actual clocks, but only one summarizing description.
In programming, we call this concept or summarizing description a &lt;span class="vocab"&gt;class&lt;/span&gt;.
Particular things that fit the description are &lt;span class="vocab"&gt;instances&lt;/span&gt; of the class.
Instances all have the same behaviors, but usually have different state information.

&lt;/p&gt;

&lt;div class="vocab top100"&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;p&gt;instance&lt;/p&gt;
&lt;p&gt;object&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;We've discussed classes already, describing clocks, toasters, cell phones, and MP3 players.
The following pages contain some more real-world examples.&lt;/p&gt;




&lt;/body&gt;&lt;/html&gt;</content>
                </OTIntroPage>
                <OTExamplePage id="ccbb8ff3-ee63-11dd-b081-1b1eed2735e4" title="Shoes" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Example";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;



&lt;table border="1" &gt;
&lt;tr&gt;&lt;th&gt;real-world "class"&lt;/th&gt;&lt;th&gt;real-world instances&lt;/th&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;p&gt;

A shoe class. Its state information includes size, color, and style. 
A simple behavior would be to communicate its size to someone. &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;img src="art/ist2_6489294-women-shoes.jpg" alt="a bunch of feet wearing a variety of shoes"&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;



&lt;/body&gt;&lt;/html&gt;</content>
                </OTExamplePage>
                <OTExamplePage id="3b2d7cf4-ee64-11dd-b081-1b1eed2735e4" title="Restaurant reservations" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Example";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.


&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;



&lt;table border="1" &gt;

&lt;tr&gt;&lt;td&gt;&lt;p&gt;An online restaurant reservation service.
Its behaviors include making a reservation, cancelling a reservation,
and determining what restaurants have tables available at a given time and date.
Its state information includes the collection of upcoming reservations people have made
and the set of restaurants at which one can make a reservation.


&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;img src="art/openTable.jpg" alt="the home page of Open Table, an online reservation service"&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;


&lt;/table&gt;



&lt;/body&gt;&lt;/html&gt;</content>
                </OTExamplePage>
                <OTExamplePage id="683ea896-ee64-11dd-b081-1b1eed2735e4" title="Songs" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Example";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;




&lt;table border="1" &gt;

&lt;tr&gt;&lt;td&gt;

&lt;p&gt;A song class. Among its behaviors is playing itself.
Its state information includes the length in seconds, the type of music, and the artist.&lt;/p&gt;

&lt;/td&gt;

&lt;td&gt;&lt;p&gt;

&lt;ul&gt;
&lt;li&gt;"Happy Birthday"&lt;br&gt;
&lt;/li&gt;

&lt;li&gt;"(I Can't Get No) Satisfaction"

&lt;/li&gt;
&lt;/ul&gt;

&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;


&lt;/table&gt;



&lt;/body&gt;&lt;/html&gt;</content>
                </OTExamplePage>
                <OTCartoonPage id="cc737cb0-f193-11dd-be4a-7736503cf5d2" title="Visualizing classes and instances" authorNotes="" hoverString="Pas Step" speechText="">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Cartoon";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;
&lt;h3&gt;Classes &amp; Instances&lt;/h3&gt;
 
&lt;table class="cartoonTable"&gt;
&lt;tr&gt;
&lt;td class="cartoonText"&gt;Classes are like a set of instructions describing how to create an object.&lt;/td&gt;

&lt;td&gt;&lt;img right" src="art/toaster_toon_book.png" width="175px"/&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;table class="cartoonTable"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="art/toaster_toon_readbook.png" width="175px"/&gt;
&lt;td class="cartoonText"&gt;Java can use the instructions to create a new object.&lt;/td&gt;

&lt;/tr&gt;&lt;/table&gt;

&lt;table class="cartoonTable"&gt;
&lt;tr&gt;
&lt;td class="cartoonText"&gt;The object that is built is called an instance of the class.&lt;/td&gt;
&lt;td&gt;&lt;img right" src="art/toaster_toon_build.png" width="200px"/&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;table class="cartoonTable"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="art/toaster_toon_factory.png" width="300px"/&gt;
&lt;td class="cartoonText"&gt;Using the class, Java can make any number of instances.  &lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;/body&gt;&lt;/html&gt;</content>
                </OTCartoonPage>
                <OTSelfAssessment id="66e1983d-c7c8-11dd-a0a2-731fa99198e1" title="Inferring a class" authorNotes="" hoverString="Pas Step" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3">
                          <value isDefault="false" isCorrect="false">choice 2</value>
                        </correctResponse>
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="true" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;

&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;Choose a class for which the following would be instances. &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;p&gt;&lt;img
src="http://tels-group.soe.berkeley.edu/uccp/Assets/art/ist2_5981753-chihuahua.jpg"
 height="150" alt="a chihuahua" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;A chihuahua&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;img
src="http://tels-group.soe.berkeley.edu/uccp/Assets/art/ist2_3639349-jack-russell-long-haired-1-years.jpg"
 height="150" alt="a Jack Russell terrier" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;A Jack Russell terrier&lt;/p&gt;

&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;img
src="http://tels-group.soe.berkeley.edu/uccp/Assets/art/istockphoto_631499-good-girl-rough-collie-lassie-dog.jpg"
 height="150" alt="a collie" /&gt;&lt;/p&gt;
&lt;p align="center"&gt;A collie&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;/body&gt;
&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1">
                            <feedbackInline identifier="choice 1" showHide="show">A German shepherd might be another instance of a dog class, but it's hard to see how a chihuahua would be an instance of a German shepherd.</feedbackInline>
                            German shepherd
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 2">
                            <feedbackInline identifier="choice 2" showHide="show">Exactly. All the given instances are dogs.</feedbackInline>
                            dog
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID3">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID3">While these are all animals, one of the other choices is both more specific and still appropriate.</feedbackInline>
                            animal
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID4">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID4">A hound might be a class with instances such as a basset hound, a blood hound, or a beagle, but none of the pictured dogs are hounds.</feedbackInline>
                            hound
                          </simpleChoice>
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;

&lt;title&gt;&lt;/title&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</introductionHtml>
                </OTSelfAssessment>
                <OTQuestionAnswer id="cbfc3bac-c7c6-11dd-a0a2-731fa99198e1" title="Supplying some instances" authorNotes="" hoverString="Pas Step" authoringUrl="http://128.32.157.151:8080/webapp/author/brainstorm/authorbrainstorm.html?brainstormId=26" discussionId="26" url="http://www.google.com/" />
                <OTQuestionAnswer id="092b528e-c7cd-11dd-a0a2-731fa99198e1" title="Class versus instance" authorNotes="" hoverString="Pas Step" authoringUrl="http://128.32.157.151:8080/webapp/author/brainstorm/authorbrainstorm.html?brainstormId=27" discussionId="27" url="http://www.google.com/" />
                <OTReadingPage id="f2472765-bfb8-11dd-b365-ffaffe089d99" title="Playing cards" authorNotes="" hoverString="Pas Step" speechText="Another class is a playing card. Its instance variables are the card's rank ace, two, three, ..., ten, jack, queen, king and suit spades, hearts, diamonds, or clubs. Its behaviors include the following: Determine if another card has the same rank as this card. Determine if another card has the same suit as this card. Determine the value of a card with a given rank. For example, jacks and queens and kings all have value 10 in many card games, and an ace sometimes has value 1 and sometimes has value 11. Note the use of card parameters in the card comparison behaviors.">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Reading";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;

&lt;p&gt;
&lt;img src="art/ist2_1434791-poker-hands.jpg" alt="pictures of some poker hands"&gt;
&lt;/p&gt;

&lt;p&gt;
Another class is a playing card. 
Its instance variables are the card's rank (ace, two, three, ..., ten, jack, queen, king)
and suit (spades, hearts, diamonds, or clubs).
Its behaviors include the following:

&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;Determine if another card has the same rank as this card.&lt;/li&gt;
&lt;li&gt;Determine if another card has the same suit as this card.&lt;/li&gt;
&lt;li&gt;Determine the value of a card with a given rank. 
(For example, jacks and queens and kings all have value 10 in many card games,
and an ace sometimes has value 1 and sometimes has value 11.)&lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt;

Note the use of card parameters in the card comparison behaviors.
&lt;/p&gt;

&lt;/body&gt;&lt;/html&gt;</content>
                </OTReadingPage>
                <OTQuiz id="4540282b-f2ce-11dd-a539-0d677f825d10" title="A playing card instance" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="false" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <responseDeclaration identifier="TEXT_ASSMT_0" />
                      <itemBody>
                        <extendedTextInteraction hasInlineFeedback="false" responseIdentifier="TEXT_ASSMT_0" expectedLines="3">
                          <prompt>&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;

Give an instance of the playing card class, and specify the values of its rank and suit variables.
&lt;/p&gt;

&lt;/body&gt;&lt;/html&gt;</prompt>
                        </extendedTextInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"&#xD;
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&#xD;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&#xD;
&lt;head&gt;&#xD;
&lt;meta name="generator"&#xD;
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;&#xD;
&lt;title&gt;&lt;/title&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body&#xD;
style="font-size:1.2em; font-weight:bold; font-family:Verdana, Arial,Helvetica; width:400px; margin:20px 0 10px 0 ; color:#3333FF; line-height:120%;"&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</introductionHtml>
                </OTQuiz>
                <OTSelfAssessment id="33fd7bef-c7d3-11dd-a0a2-731fa99198e1" title="Card class versus card instances" authorNotes="" hoverString="Pas Step" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3">
                          <value isDefault="false" isCorrect="false">choice 2</value>
                        </correctResponse>
                      </responseDeclaration>
                      <responseDeclaration identifier="CHOICE_ASSMT_0">
                        <correctResponse>
                          <value isDefault="false" isCorrect="false">SIMPLE_CHOICE_ID2</value>
                        </correctResponse>
                      </responseDeclaration>
                      <responseDeclaration identifier="CHOICE_ASSMT_1">
                        <correctResponse>
                          <value isDefault="false" isCorrect="false">SIMPLE_CHOICE_ID2</value>
                        </correctResponse>
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="true" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;link
href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;Is "another card" a class or an instance?&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1">
                            <feedbackInline identifier="choice 1" showHide="show">A class describes a card. When comparing ranks, we need actual card objects.</feedbackInline>
                            class
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 2">
                            <feedbackInline identifier="choice 2" showHide="show">Right</feedbackInline>
                            instance
                          </simpleChoice>
                        </choiceInteraction>
                        <choiceInteraction hasInlineFeedback="true" responseIdentifier="CHOICE_ASSMT_0" maxChoices="1" shuffle="false">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;Is "this card" a class or an instance?&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID1">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID1">No: a class describes a card. When comparing ranks, we need actual card objects.</feedbackInline>
                            class
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID2">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID2">Correct</feedbackInline>
                            instance
                          </simpleChoice>
                        </choiceInteraction>
                        <choiceInteraction hasInlineFeedback="true" responseIdentifier="CHOICE_ASSMT_1" maxChoices="1" shuffle="false">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;In a card game playing program, one might also find a "deck"
class that represents a deck of cards. Would the state information
for the deck include a sequence of playing card &lt;em&gt;classes&lt;/em&gt; or
a sequence of playing card &lt;em&gt;instances&lt;/em&gt;?&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID1">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID1">There's only one playing card class. A sequence of cards would have to consist of card instances.</feedbackInline>
                            classes
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID2">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID2">Right!</feedbackInline>
                            instances
                          </simpleChoice>
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"&#xD;
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&#xD;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&#xD;
&lt;head&gt;&#xD;
&lt;meta name="generator"&#xD;
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;&#xD;
&lt;link href="http://uccpdev.berkeley.edu/uccp-assets/css/UCCP.css"&#xD;
media="screen" rel="stylesheet" type="text/css" /&gt;&#xD;
&lt;title&gt;&lt;/title&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body id="selfCheckIntro"&gt;&#xD;
&lt;p class="Intro1"&gt;Among the behaviors in the playing card class is&#xD;
the following:&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&lt;li&gt;Determine if another card has the same rank as this card.&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</introductionHtml>
                </OTSelfAssessment>
                <OTReadingPage id="5ba5cb38-bfb9-11dd-b365-ffaffe089d99" title="Objects working in collaboration" authorNotes="" hoverString="Pas Step" speechText="When a program contains two different objects, they can work together to perform complicated tasks. A behavior from one object can call a behavior of the other object, and vice versa. An important and sometimes difficult task in programming is figuring out how something complicated can be achieved by several simpler objects working together. Consider a  calculator that can add and subtract numbers.  All told, a calculator is a pretty complex thing, even one that can only do two kinds of arithmetic. Breaking it down into two objects make things simpler, however: A keyboard that keeps track of keystrokes typed by the user until ENTER is typed. An accumulator that, given a sequence of keystrokes provided by the keyboard, can evaluate it figuring out what the sum or difference is and either display it or display the accumulation of that value with whatever the accumulator was storing before. The next step provides a demonstration of such a calculator.">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Reading";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;

&lt;h3&gt;Objects Working in Collaboration&lt;/h3&gt;

&lt;p&gt;When a program contains two different objects, they can work together to perform complicated tasks. 
A behavior from one object can call a behavior of the other object, and vice versa. 
 An important and sometimes difficult task in programming
is  figuring out how something complicated can be achieved 
by several simpler objects working together.
&lt;/p&gt;

&lt;div class="key"&gt;Several simple objects working together can do complicated things.&lt;/div&gt;

&lt;p&gt;Consider a  calculator that can add and subtract numbers.  All told, a calculator is a pretty complex thing, even one
that can only do two kinds of arithmetic.  Breaking it down into two objects make things simpler, however:

&lt;/p&gt;
&lt;img src="art/calculator_2in1.png" align="left" width="350"&gt;

&lt;ul&gt;

&lt;li&gt;A &lt;strong&gt;keyboard&lt;/strong&gt; that keeps track of keystrokes typed by the user
until ENTER is typed.


&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;accumulator&lt;/strong&gt; that, given a sequence of keystrokes provided by the keyboard,
can evaluate it (figuring out what the sum or difference is)
and either display it or display the &lt;em&gt;accumulation&lt;/em&gt; of that value with whatever the accumulator
was storing before.

&lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt;
The next step provides a demonstration of such a calculator.
&lt;/p&gt;






&lt;/body&gt;&lt;/html&gt;</content>
                </OTReadingPage>
                <OTSimulationPage id="67bc94d9-bfb9-11dd-b365-ffaffe089d99" title="A calculator" authorNotes="" hoverString="Pas Step" speechText="Below is a simulation of a calculator which includes two programming objects: a keyboard and a display. Try it out.  Can you use it to figure out the sum of 78 and 45?">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Simulation";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;

&lt;h3&gt;A Calculator&lt;/h3&gt;

&lt;p&gt;Below is a simulation of a calculator which includes two programming objects: a keyboard and a display.  
&lt;/p&gt;

&lt;p&gt; Try it out.  Can you use it to figure out the sum of 78 and 45?
&lt;/p&gt;

&lt;embed name="calc" id="calc" src="simulation/Calc.swf" width="700" height="400" quality="high"&gt;
&lt;/embed&gt;

&lt;/body&gt;&lt;/html&gt;</content>
                </OTSimulationPage>
                <OTSelfAssessment id="077f8b48-c962-11dd-bae8-f7388d058537" title="Counting applications of accumulator behaviors" authorNotes="" hoverString="Pas Step" speechText="" isInjectPrompt="false" lockStudentAnswers="true" randomChoiceOrder="false">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3">
                          <value isDefault="false" isCorrect="false">choice 3</value>
                        </correctResponse>
                      </responseDeclaration>
                      <itemBody>
                        <choiceInteraction hasInlineFeedback="true" responseIdentifier="CHOICE_SELF_CHECK_ID" maxChoices="1" shuffle="false">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;

&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;

How many times are accumulator behaviors performed?
&lt;/p&gt;


&lt;/body&gt;&lt;/html&gt;</prompt>
                          <simpleChoice fixed="true" identifier="choice 1">
                            <feedbackInline identifier="choice 1" showHide="show">That's too few. How many keystrokes actually change the value displayed by the accumulator?</feedbackInline>
                            1
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 2">
                            <feedbackInline identifier="choice 2" showHide="show">That's almost right. Did you forget a behavior?</feedbackInline>
                            2
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 3">
                            <feedbackInline identifier="choice 3" showHide="show">Correct. The keyboard is requesting that an accumulator behavior be performed once for each ENTER and once for each CLEAR.</feedbackInline>
                            3
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID4">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID4">Are you sure you didn't count some extras?</feedbackInline>
                            4
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="choice 4">
                            <feedbackInline identifier="choice 4" showHide="show">Did you mistake keyboard behaviors for accumulator behaviors?</feedbackInline>
                            5
                          </simpleChoice>
                          <simpleChoice fixed="true" identifier="SIMPLE_CHOICE_ID6">
                            <feedbackInline identifier="SIMPLE_CHOICE_ID6">Not all keystrokes result in an accumulator behavior being performed.</feedbackInline>
                            8
                          </simpleChoice>
                        </choiceInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                  <introductionHtml>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;title&gt;&lt;/title&gt;

&lt;/head&gt;
&lt;body id="selfCheckIntro"&gt;
&lt;p class="Intro1"&gt;Suppose the user hits the keys&lt;/p&gt;
&lt;pre&gt;
    3
    4
    ENTER
    +
    2
    3
    ENTER
    CLEAR
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</introductionHtml>
                </OTSelfAssessment>
                <OTQuiz id="7b193f1b-bfb9-11dd-b365-ffaffe089d99" title="Producing a particular display" authorNotes="" hoverString="Pas Step" isInjectPrompt="true" lockStudentAnswers="false" randomChoiceOrder="false" introductionHtml="">
                  <jaxbXML>
                    <assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p0" xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns2="http://www.w3.org/1999/xlink" timeDependent="false" adaptive="false">
                      <responseDeclaration identifier="CHOICE_SELF_CHECK_ID">
                        <correctResponse interpretation="choice 3" />
                      </responseDeclaration>
                      <responseDeclaration identifier="TEXT_ASSMT_0" />
                      <itemBody>
                        <extendedTextInteraction hasInlineFeedback="false" responseIdentifier="TEXT_ASSMT_0" expectedLines="6">
                          <prompt>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;

&lt;head&gt;
&lt;meta name="generator"
content="HTML Tidy for Java (vers. 26 Sep 2004), see www.w3.org" /&gt;
&lt;base href="http://tels-group.soe.berkeley.edu/uccp/Assets/" /&gt;
&lt;link
href="http://tels-group.soe.berkeley.edu/uccp/Assets/css/UCCP.css"
media="screen" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p class="selfCheckQuestion"&gt;Give a sequence of keystrokes that results in&lt;/p&gt;
&lt;ol type="a"&gt;
&lt;li&gt;accumulator behaviors being performed twice; and&lt;/li&gt;
&lt;li&gt;27 appears on the display&lt;/li&gt;

&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</prompt>
                        </extendedTextInteraction>
                      </itemBody>
                    </assessmentItem>
                  </jaxbXML>
                </OTQuiz>
                <OTSummaryPage id="8eed3c3d-bfb9-11dd-b365-ffaffe089d99" title="Summary: terminology in object oriented programming" authorNotes="" hoverString="Pas Step" speechText="In this activity, you were introduced to the idea of a class, a sort of blueprint or pattern from which objects with a given behavior and state may be produced. Each object produced from a class is an instance of the class. We examined several examples of classes and instances: shoes, online restaurant reservation services, sewing patterns and clothes made from them, songs, restaurants, books, playing cards, and calculators. We will soon see that every Java program is a collection of classes. When run, the program will produce objects that will interact, produce output, and so on.">
                  <content>&lt;html&gt;&lt;head&gt;
&lt;base href="http://uccpdev.berkeley.edu:10080/uccp-assets/" /&gt;
&lt;script type="text/javascript"&gt;

var stepType = "Summary";
var unit = "1";
var tools = "";   // for including optional tools: slideshow, etc.

&lt;/script&gt;
&lt;script type="text/javascript" src="script/loader_main.js"&gt;&lt;/script&gt;

&lt;/head&gt;&lt;body&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;
In this activity, you were introduced to the idea of a &lt;strong&gt;class&lt;/strong&gt;,
a sort of blueprint or pattern from which objects with a given behavior and state may be produced.
Each object produced from a class is an &lt;strong&gt;instance&lt;/strong&gt; of the class.
We examined several examples of classes and instances: shoes, online restaurant reservation services,
sewing patterns and clothes made from them, songs, restaurants, books, playing cards, and calculators.


&lt;/p&gt;

&lt;p&gt;
We will soon see that every Java program is a collection of classes.
When run, the program will produce objects that will interact, produce output, and so on.
&lt;/p&gt;

&lt;/body&gt;&lt;/html&gt;</content>
                </OTSummaryPage>
              </stepList>
            </OTPasActivity>
          </activityList>
        </OTPasProject>
      </root>
      <library>
        <OTCompoundDoc name="top-menu" showEditBar="false">
          <bodyText>
            <div class="top-menu">
              <table>
                <tr>
                  <td>
                    <object refid="${[no menu in author mode]}" viewid="textsize-choice-view" />
                  </td>
                </tr>
              </table>
            </div>
          </bodyText>
        </OTCompoundDoc>
      </library>
    </OTSystem>
  </objects>
</otrunk>

